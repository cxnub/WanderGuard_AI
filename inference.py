"""
This module provides functions for loading a machine learning model, parsing input data, and generating predictions.
Functions:
    model_fn(model_dir):
    input_fn(request_body, request_content_type):
    predict_fn(input_data, model):
"""

import os
import json
import joblib
import pandas as pd


# Model loading function
def model_fn(model_dir):
    """
    Load a machine learning model from a specified directory.

    Args:
        model_dir (str): The directory where the model file is located.

    Returns:
        model: The loaded machine learning model.
    """
    model_path = os.path.join(model_dir, "model.pkl")
    model = joblib.load(model_path)

    return model


# Inference function
def input_fn(request_body, request_content_type):
    """
    Parses the input request body based on the specified content type and converts it into a pandas DataFrame.

    Args:
        request_body (str): The body of the request, expected to be in JSON format.
        request_content_type (str): The content type of the request body. Currently, only "application/json" is supported.

    Returns:
        pd.DataFrame: A pandas DataFrame containing the parsed data from the request body.

    Raises:
        ValueError: If the content type is not "application/json".
    """
    if request_content_type == "application/json":
        data = json.loads(request_body)  # Convert JSON to dictionary
        df = pd.DataFrame([data])  # Convert dictionary to DataFrame
        return df
    else:
        raise ValueError(f"Unsupported content type: {request_content_type}")


# Prediction function
def predict_fn(input_data, model):
    """
    Generate predictions using the provided model and input data.

    Args:
        input_data (array-like): The input data to be used for making predictions.
        model (object): The trained model that will be used to make predictions.

    Returns:
        list: A list of predictions generated by the model.
    """
    # convert input data to DataFrame
    input_data = pd.DataFrame(input_data)

    # transform timestamp into day_of_week and hour_of_day
    input_data["timestamp"] = pd.to_datetime(input_data["timestamp"])
    input_data["day_of_week"] = input_data["timestamp"].dt.dayofweek
    input_data["hour_of_day"] = input_data["timestamp"].dt.hour

    # drop timestamp column
    input_data = input_data.drop("timestamp", axis=1)

    predictions = model.predict(input_data)  # Make predictions
    return predictions.tolist()
